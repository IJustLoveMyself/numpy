#***********coding:utf-8***********
import numpy as np

#Numpy 广播

#对数组的算术运算通常在相应的元素上进行。 如果两个阵列具有完全相同的形状，则这些操作被无缝执行
a = np.array([1,2,3,4,5])
b = np.array([11,12,13,15,15])
c = a * b
print c #[11 24 39 60 75]

#如果数组的阵列不同
#如果两个数组的后缘维度(即：从末尾开始算起的维度)的轴长相符或其中一方的长度为1，
# 则认为它们是广播兼容的，
# 广播会在缺失和(或)长度为1的轴上进行

a = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])
b = np.array([1,2,3])
print a.shape #(4, 3)
print b.shape #(3,)
print a+b
# [[ 1  2  3]
#  [11 12 13]
#  [21 22 23]
#  [31 32 33]]
# 可以在b上增加长度为1的维度即（1,3）,后缘维度都是3,然后会在长度
# 为1的轴上广播，使b变成（4,3）的形状，即b = [[1,2,3],[1,2,3],[1,2,3],[1,2,3]]

a = np.array([1,2,3,4,5])
b = np.array([[1],[2],[3],[4]])
print b
print a.shape #(5,)
print b.shape #(4, 1)
print a+b
# [[2 3 4 5 6]
#  [3 4 5 6 7]
#  [4 5 6 7 8]
#  [5 6 7 8 9]]
#先在a上增加一个长度为1维度，变成（1,5），使a、b的维度相同。只要对应的轴长相同或者这其中一方为1,
#就是广播兼容的。即a=[[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]
#b=[[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4]]

a = np.array([1,2,3,4])
b = np.array([[[1,2,3,4],[5,6,7,8]],[[1,2,3,4],[5,6,7,8]]])
c = np.array([[[1,2,3,4],[1,2,3,4]],[[1,2,3,4],[1,2,3,4]]])
print a.shape #(4,)
print b.shape #(2,2,4)
print a+b
# [[[ 2  4  6  8]
#   [ 6  8 10 12]]
#
#  [[ 2  4  6  8]
#   [ 6  8 10 12]]]
print c+b #c就相当于a针对b进行的广播，所以结果和a+b相同
# [[[ 2  4  6  8]
#   [ 6  8 10 12]]
#  [[ 2  4  6  8]
#   [ 6  8 10 12]]]

#如果维度相同，则其轴长需要相同，或者其中相对应的轴长中，有一个轴长为1.则可以广播如果维度不同，
#则对其增加长度为1的维度，在维度相同后进行比较，如果相对应的轴长相同或者其中有一个轴长为1，则
#可以广播，广播的方向是在轴长为1的维度上一次进行。